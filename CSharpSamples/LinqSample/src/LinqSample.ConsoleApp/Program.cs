using LinqSample.ConsoleApp;


// SelectMany Sample
var courses = StudentService.GetAllStudents()
    .SelectMany(student => student.Courses)
    .Distinct(); // If you want to ignore the duplicated values

foreach (var course in courses)
{
    Console.WriteLine(course);
}

// SelectMany Sample 
// Create a items from the result.
var studentReports = StudentService.GetAllStudents()
    .SelectMany(student => student.Courses, (student, course) =>
        new StudentReport { StudentName = student.Name, CourseName = course });

PrintSeperator();
Console.WriteLine("Student Reports: ");
foreach (var studentReport in studentReports)
{
    Console.WriteLine($"{studentReport.StudentName} - {studentReport.CourseName}");
}


#region InnerJoin Sample                      *
PrintTitle("Inner Join", true, false);
List<EmployeeType> employeeTypes = new List<EmployeeType>
{
    new EmployeeType{Id = 1, Title = "Developer"},
    new EmployeeType{Id = 2, Title = "QA"},
    new EmployeeType{Id = 3, Title = "BA"},
};

List<Employee> employees = new List<Employee>
{
    new Employee{Id = 1, Name = "John Doe", EmployeeTypeId = 1},
    new Employee{Id = 2, Name = "Jane Doe", EmployeeTypeId = 1},
    new Employee{Id = 3, Name = "Peter Jackson", EmployeeTypeId = 2},
    new Employee{Id = 4, Name = "Luke Skywalker", EmployeeTypeId = 2},
    new Employee{Id = 5, Name = "Bilbo Baggins", EmployeeTypeId = 3},
    new Employee{Id = 5, Name = "Samwise Gamgee", EmployeeTypeId = 3},
    new Employee{Id = 6, Name = "Merry Brandybuck", EmployeeTypeId = 4},
    new Employee{Id = 7, Name = "Frodo Baggins", EmployeeTypeId = 5},
    new Employee{Id = 8, Name = "Pippin Took", EmployeeTypeId = 6},
};

// Creating new Employee report from InnerJoin of Epmployee and EmplyeeTypes
var employeeReports = from employee in employees                            // Left Table
                      join employeeType in employeeTypes                    // Right Table
                      on employee.EmployeeTypeId equals employeeType.Id     // Condition
                      select new EmployeeReport                             // Result
                      {
                          EmployeeName = employee.Name,
                          EmployeePosition = employeeType.Title
                      };

PrintTitle("Result generated by Query Syntax", false, true);
foreach (var employeeReport in employeeReports)
{
    Console.WriteLine($"Employee Name: {employeeReport.EmployeeName} - Position: {employeeReport.EmployeePosition}");
}

// Creating new Employee report from InnerJoin of Epmployee and EmplyeeTypes
var secondEmployeeReports = employees.Join(employeeTypes,                                   // Left Table and Right Table
                                           employee => employee.EmployeeTypeId,             // Conditions
                                           employeeType => employeeType.Id,                 // Conditions
                                           (employee, employeeType) => new EmployeeReport   // Result
                                           {
                                               EmployeeName = employee.Name,
                                               EmployeePosition = employeeType.Title
                                           });

PrintTitle("Result generated by Fluent Syntax", false, true);
foreach (var employeeReport in secondEmployeeReports)
{
    Console.WriteLine($"Employee Name: {employeeReport.EmployeeName} - Position: {employeeReport.EmployeePosition}");
}
#endregion




static void PrintTitle(string title, bool printSeperator, bool spaceFromTop)
{
    if (spaceFromTop)
    {
        Console.WriteLine();
    }

    if (printSeperator)
    {
        PrintSeperator();
    }

    Console.ForegroundColor = ConsoleColor.Green;
    Console.WriteLine(title);
    Console.ResetColor();
}

static void PrintSeperator()
{
    Console.ForegroundColor = ConsoleColor.Yellow;
    Console.WriteLine("----------------------------------------------------------------");
    Console.ResetColor();
}


